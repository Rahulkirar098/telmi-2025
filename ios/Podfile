def node_require(script)
  require Pod::Executable.execute_command('node', ['-p',
    "require.resolve(\n      '#{script}',\n      {paths: [process.argv[1]]},\n    )", __dir__]).strip
end

node_require('react-native/scripts/react_native_pods.rb')
node_require('react-native-permissions/scripts/setup.rb')

platform :ios, min_ios_version_supported
prepare_react_native_project!

# Using static frameworks for Firebase
use_frameworks! :linkage => :static
$RNFirebaseAsStaticFramework = true

target 'telmi' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
  
  # Add SDWebImage pods
  pod 'SDWebImage'
  pod 'SDWebImageWebPCoder'
  
  # Permissions (new recommended way)
  setup_permissions([
    'Camera',
    'Microphone',
  ])
  
  # VideoSDK
  pod 'react-native-webrtc', :path => '../node_modules/@videosdk.live/react-native-webrtc'

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    
    # This is necessary for Xcode 14+
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = min_ios_version_supported
        
        # Fix compilation warnings and errors
        config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['VALIDATE_PRODUCT'] = 'NO'
        config.build_settings['WARNING_CFLAGS'] = '-Wno-shorten-64-to-32'
        config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
        config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
        config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO'
        config.build_settings['CLANG_WARN_UNGUARDED_AVAILABILITY'] = 'NO'
        
        # Fix for glog compilation issues
        if target.name == 'glog'
          config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++11'
          config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'GOOGLE_STRIP_LOG=1'
        end
        
        # Fix for SDWebImage compilation issues
        if target.name == 'SDWebImage'
          config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        end
        
        # Fix for libwebp compilation issues
        if target.name == 'libwebp'
          config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
          config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
          config.build_settings['WARNING_CFLAGS'] = '-Wno-shorten-64-to-32'
        end
        
        # Fix for nanopb compilation issues
        if target.name == 'nanopb'
          config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
          config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        end
      end
    end
  end
end
